{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  authenticate(username, password, userType) {\n    this.http.get('http://localhost:5175/api/Users').subscribe(response => {\n      const user = response.find(user => user.Username === username && user.Password === password && user.Role === userType);\n      if (user) {\n        if (userType === 'Admin') {\n          this.router.navigate(['/admin_dashboard']);\n        } else if (userType === 'Student') {\n          this.router.navigate(['/student_dashboard']);\n        } else if (userType === 'Faculty') {\n          this.router.navigate(['/faculty_dashboard']);\n        }\n      } else {\n        console.error('Authentication failed: Invalid credentials or user type');\n      }\n    }, error => {\n      console.error('Authentication failed:', error);\n    });\n  }\n}\n_class = AuthenticationService;\n_class.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthenticationService","constructor","http","router","authenticate","username","password","userType","get","subscribe","response","user","find","Username","Password","Role","navigate","console","error","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\Project Genpact\\UMS\\UniversityApp\\src\\app\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n    \n  constructor(private http: HttpClient, private router:Router){}\n\n  authenticate(username: string, password: string, userType: string): void {\n    this.http.get('http://localhost:5175/api/Users').subscribe(\n      (response: any[]) => {\n        const user = response.find(user => user.Username === username && user.Password === password && user.Role === userType);\n        \n        if (user) {\n          if (userType === 'Admin') {\n            this.router.navigate(['/admin_dashboard']);\n          } else if (userType === 'Student') {\n            this.router.navigate(['/student_dashboard']);\n          } else if (userType === 'Faculty') {\n            this.router.navigate(['/faculty_dashboard']);\n          }\n        } else {\n          console.error('Authentication failed: Invalid credentials or user type');\n        }\n      },\n      (error: any) => {\n        console.error('Authentication failed:', error);\n      }\n    );\n  }\n  \n}\n"],"mappings":";;;;AAMA,OAAM,MAAOA,qBAAqB;EAGhCC,YAAoBC,IAAgB,EAAUC,MAAa;IAAvC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;EAAS;EAE7DC,YAAYA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,QAAgB;IAC/D,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,iCAAiC,CAAC,CAACC,SAAS,CACvDC,QAAe,IAAI;MAClB,MAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,QAAQ,KAAKR,QAAQ,IAAIM,IAAI,CAACG,QAAQ,KAAKR,QAAQ,IAAIK,IAAI,CAACI,IAAI,KAAKR,QAAQ,CAAC;MAEtH,IAAII,IAAI,EAAE;QACR,IAAIJ,QAAQ,KAAK,OAAO,EAAE;UACxB,IAAI,CAACJ,MAAM,CAACa,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;SAC3C,MAAM,IAAIT,QAAQ,KAAK,SAAS,EAAE;UACjC,IAAI,CAACJ,MAAM,CAACa,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC;SAC7C,MAAM,IAAIT,QAAQ,KAAK,SAAS,EAAE;UACjC,IAAI,CAACJ,MAAM,CAACa,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC;;OAE/C,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,yDAAyD,CAAC;;IAE5E,CAAC,EACAA,KAAU,IAAI;MACbD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CACF;EACH;;SA1BWlB,qBAAqB;;mBAArBA,MAAqB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAArBxB,MAAqB;EAAAyB,OAAA,EAArBzB,MAAqB,CAAA0B,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}